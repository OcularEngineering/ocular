import { OpenAI } from 'openai';
import OpenAIService from '../services/open-ai';

describe('OpenAIService', () => {
  let service;

  beforeEach(() => {
    service = new OpenAIService({
      rateLimiterService: {
        getRequestQueue: jest.fn().mockReturnValue({
          removeTokens: jest.fn()
        })
      }
    }, {
      embedding_model: process.env.OPEN_AI_EMBEDDING_MODEL,
      open_ai_key: process.env.OPEN_AI_KEY,
      chat_model: process.env.OPEN_AI_CHAT_MODEL
    });
  });

  it('should create embeddings', async () => {
    const doc = { content: 't' };
    const embeddings = await service.createEmbeddings("test content");
    expect(embeddings).toEqual([1, 2, 3]);
    expect(OpenAI).toHaveBeenCalledWith({
      apiKey: 'test-key',
      defaultQuery: { 'api-version': 'test-version' },
      defaultHeaders: { 'api-key': 'test-key' },
      baseURL: 'test-endpoint/openai/deployments/test-deployment'
    });
    expect(service.openai_.embeddings.create).toHaveBeenCalledWith({
      input: 'test content',
      model: 'test-model'
    });
  });

  it('should return empty array if doc content is not provided', async () => {
    const doc = {};
    const embeddings = await service.createEmbeddings("test");
    expect(embeddings).toEqual([]);
  });

  // it('should complete chat', async () => {
  //   const messages = [
  //     {role: 'system', content: 'You are a helpful assistant.'},
  //     {role: 'user', content: 'Translate the following English text to French: "Hello, how are you?"'}
  //   ];
  //   const result = await service.completeChat(messages);
  //   expect(result).toEqual( "\"Bonjour, comment vas-tu ?\"");
  // });

});