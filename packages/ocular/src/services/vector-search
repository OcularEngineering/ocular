import { IndexSettings } from "../types/search"
import {indexTypes}  from "../utils/search"
import { Pinecone } from '@pinecone-database/pinecone';
import { AbstractSearchService } from "../interfaces/search"
import { SearchOptions } from "../types/search/options"
import { PineConePluginOptions} from "../types/search/pinecone"
import { ConfigModule } from "../types"

class VectorSearchService extends AbstractSearchService {
  isDefault = false

  protected readonly config_: ConfigModule
  protected readonly client_: Pinecone

  constructor(_, config) {
    super(_, config)

    this.config_ = config

    const { apiKey } = this.config_.projectConfig.vector_search_options as PineConePluginOptions

    if (!apiKey) {
      throw new Error("Please provide a valid Application ID")
    }

    this.client_ = new Pinecone({ apiKey: apiKey});
  }

  /**
   * Add two numbers.
   * @param {string} indexName - The name of the index
   * @param {*} options - not required just to match the schema we are used it
   * @return {*}
   */
  async createIndex(indexName: string, options: Record<string, unknown> = {}) {
    // Create a Pinecone index with a dimension of 384 to hold the outputs
  // of our embeddings model. Use suppressConflicts in case the index already exists.
  // await pinecone.createIndex({
  //   name: indexName,
  //   dimension: 384,
  //   spec: {
  //     serverless: {
  //       region: indexRegion,
  //       cloud: indexCloud,
  //     },
  //   },
  //   waitUntilReady: true,
  //   suppressConflicts: true,
  // });
    return await this.client_.createIndex({
      name: indexName,
      dimension: 1536,
      spec: {
        serverless: {
          cloud: 'aws',
          region: 'us-west-2',
        },
      },
      waitUntilReady: true,
    });
  }

  /**
   * Used to get an index
   * @param {string} indexName  - the index name.
   * @return {Promise<{object}>} - returns response from search engine provider
   */
  async getIndex(indexName: string) {
    return await this.client_.describeIndex(indexName)
  }

  /**
   *
   * @param {string} indexName
   * @param {Array} documents - products list array
   * @param {*} type
   * @return {*}
   */
  async addDocuments(indexName: string, documents: any, type: string) {
    // Embed Docs Then Add Them To The Index
    const transformedDocuments = await this.getTransformedDocuments(
      type,
      documents
    )

    // Embeding Engine


    // try{
    //   this.client_.index(indexName).upsert([{
    //     id: '1234',
    //     values: [
    //       .... // embedding values
    //     ]
    //   }])
    // }catch(e){
    //   console.log("e", e)
    // }
  }

  /**
   * Used to replace documents
   * @param {string} indexName  - the index name.
   * @param {Object} documents  - array of document objects that will replace existing documents
   * @param {Array.<Object>} type  - type of documents to be replaced (e.g: products, regions, orders, etc)
   * @return {Promise<{object}>} - returns response from search engine provider
   */
  async replaceDocuments(indexName: string, documents: any, type: string) {
    const transformedDocuments = await this.getTransformedDocuments(
      type,
      documents
    )
    // return await this.client_
    //   .initIndex(indexName)
    //   .replaceAllObjects(transformedDocuments)
  }

  /**
   * Used to delete document
   * @param {string} indexName  - the index name
   * @param {string} documentId  - the id of the document
   * @return {Promise<{object}>} - returns response from search engine provider
   */
  async deleteDocument(indexName: string, documentId: string) {
    // return await this.client_.initIndex(indexName).deleteObject(documentId)
  }

  /**
   * Used to delete all documents
   * @param {string} indexName  - the index name
   * @return {Promise<{object}>} - returns response from search engine provider
   */
  async deleteAllDocuments(indexName: string) {
    // return await this.client_.initIndex(indexName).delete()
  }

  /**
   * Used to search for a document in an index
   * @param {string} indexName - the index name
   * @param {string} query  - the search query
   * @param {*} options
   * - any options passed to the request object other than the query and indexName
   * - additionalOptions contain any provider specific options
   * @return {*} - returns response from search engine provider
   */
  async search(
    indexName: string,
    query: string,
    options: SearchOptions & Record<string, unknown>
  ) {

  // Embed the Query
  // const queryEmbedding = await embedder.embed(query);

  // Query the index using the query embedding
  // return this.client_.index(indexName).query({
  //   vector: [
  //     ... // query embedding
  //   ],
  // }) 
  }

  /**
   * Used to update the settings of an index
   * @param  {string} indexName - the index name
   * @param {object} settings  - settings object
   * @return {Promise<{object}>} - returns response from search engine provider
   */
  async updateSettings(
    indexName: string,
    settings: IndexSettings & Record<string, unknown>
  ) {
    // backward compatibility
    const indexSettings = settings.indexSettings ?? settings ?? {}

    // return await this.client_.initIndex(indexName).setSettings(indexSettings)
  }

  // Indexing Helpers
  async getTransformedDocuments(type: string, documents: any[]) {
    if (!documents?.length) {
      return []
    }

    switch (type) {
      case indexTypes.PRODUCTS:
        const productsTransformer =
          this.config_.projectConfig.search_options.settings?.[indexTypes.PRODUCTS]
            ?.transformer
        return documents.map(productsTransformer)
      case indexTypes.USERS:
        const usersTransformer =
          this.config_.projectConfig.search_options.settings?.[indexTypes.USERS]
            ?.transformer
        return documents.map(usersTransformer)
      default:
        return documents
    }
  }
}

export default VectorSearchService